#!/usr/bin/env node

var fs = require('fs');
var _ = require('lodash');
var opener = require('opener');
var colors = require('colors');
var portfinder = require('portfinder');
var argv = require('optimist').argv;
var ip = require('../lib/ip');
var openBrowser = require('../lib');
var ps = require('system-proxy');
var log = console.log;

if (argv.h || argv.help) {
  log([
    "usage: open-browser [path] [options]",
    "",
    "options:",
    "  -p                 Port to use [8080]",
    "  -a                 Address to use [0.0.0.0]",
    "  -d                 Show directory listings [true]",
    "  -i                 Display autoIndex [true]",
    "  -e                 Set environment: [none], debug, daily, publish.",
    "  -s --silent        Suppress log messages from output.",
    "  --clean            Clean proxy settings.",
    "  --sysproxy         Open system proxy.",
    "  --cors             Enable CORS via the 'Access-Control-Allow-Origin' header",
    "  -c                 Set cache time (in seconds). e.g. -c10 for 10 seconds.",
    "  -t                 Using template handler 'config.js'.",
    "                     To disable caching, use -c-1.",
    "  -h --help          Print this list and exit."
  ].join('\n'));
  process.exit();
}

var _ip = ip.address();
var port = argv.p || parseInt(process.env.PORT, 10);
var host = argv.a || '0.0.0.0';

if (argv.clean) {
  // 取消系统代理
  return ps.setProxyOff()
    .then(function() {
      log('Proxy off ok!'.green);
      process.exit();
    })
    .catch(function() {
      log('Proxy off fail!'.red);
      process.exit();
    });
}

if (!port) {
  portfinder.basePort = 8080;
  portfinder.getPort(function(err, port) {
    if (err) throw err;
    init(port);
  });
} else {
  init(port);
}

function init(port) {
  argv.sysproxy ? ps.setProxyOn(_ip, port)
    .then(function() {
      listen(port);
    })
    .catch(function(e) {
      console.log('Start fail!'.red + e);
    }) : listen(port);

  var readLine = require("readline");
  if (process.platform === "win32") {
    var rl = readLine.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.on("SIGINT", function() {
      process.emit("SIGINT");
    });
  }
};

function listen(port) {
  var options = {
    port: port,
    ip: _ip,
    root: argv._[0],
    silent: argv.s || argv.silent,
    cache: argv.c,
    showDir: argv.d,
    autoIndex: argv.i
  };

  var config = require('../lib/config');
  if (argv.t) {
    var conf = require(process.cwd() + '/browser-config');
    _.assign(config, conf);
  }

  if (argv.e) {
    options.config = config[argv.e];
  } else {
    options.config = config['none'];
  }

  if (argv.cors) {
    options.headers = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'
    };
  }

  var server = openBrowser.createServer(options);
  server.listen(port, host, function() {
    var url = 'http://' + _ip + ':' + port;
    log('Starting up open-browser.');
    log('Server url: '.yellow + url.cyan);
    log('Hit CTRL-C to stop the server');

    opener(url);
  });

  process.on('SIGINT', function() {
    server && server.close();
    if (argv.sysproxy) {
      // 取消系统代理
      ps.setProxyOff()
        .then(function() {
          log('open-browser stopped.'.red);
          process.exit();
        })
        .catch(function() {
          log('Proxy off fail!'.red);
          log('open-browser stopped.'.red);
          process.exit();
        });
    } else {
      log('open-browser stopped.'.red);
      process.exit();
    }
  });
}